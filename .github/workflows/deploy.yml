name: DND Share Diary

on:
  push:
    branches: [ "main" ]

env:
  S3_BUCKET_NAME: dnd-diary-deploy
  PROJECT_NAME: dnd-8th-4-backend

permissions:
  contents: read

jobs:
  name: Redis runner example
  on: push

  jobs:
    # Label of the runner job
    runner-job:
      # You must use a Linux environment when using service containers or container jobs
      runs-on: ubuntu-latest

      # Service containers to run with `runner-job`
      services:
        # Label used to access the service container
        redis:
          # Docker Hub image
          image: redis
          # Set health checks to wait until redis has started
          options: >-
            --health-cmd "redis-cli ping"
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5
          ports:
            # Maps port 6379 on service container to the host
            - 6379:6379

      steps:
        # Downloads a copy of the code in your repository before running CI tests
        - name: Check out repository code
          uses: actions/checkout@v3

        # Performs a clean installation of all dependencies in the `package.json` file
        # For more information, see https://docs.npmjs.com/cli/ci.html
        - name: Install dependencies
          run: npm ci

        - name: Connect to Redis
          # Runs a script that creates a Redis client, populates
          # the client with data, and retrieves data
          run: node client.js
          # Environment variable used by the `client.js` script to create
          # a new Redis client.
          env:
            # The hostname used to communicate with the Redis service container
            REDIS_HOST: localhost
            # The default Redis port
            REDIS_PORT: 6379
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Setup jdk-17
      uses: actions/setup-java@main
      with:
        java-version: 17
        distribution: 'adopt'

    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    - uses: actions/checkout@v2
    - run : mkdir -p ./src/main/resources
    - run : touch ./src/main/resources/application.yml
    - run : echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.yml
    - run : cat ./src/main/resources/application.yml

      # 테스트 코드 관련
    - run : mkdir -p ./src/test/resources
    - run : touch ./src/test/resources/application.yml
    - run : echo "${{ secrets.TEST_APPLICATION }}" > ./src/test/resources/application.yml
    - run : cat ./src/test/resources/application.yml

      # 테스트 data.sql 관련
    - run : mkdir -p ./src/main/resources/db/h2
    - run : touch ./src/main/resources/db/h2/data.sql
    - run : echo "${{ secrets.TEST_DATA }}" > ./src/main/resources/db/h2/data.sql
    - run : cat ./src/main/resources/db/h2/data.sql

      shell: bash

    - name: Build with Gradle
      run: ./gradlew clean build

    - name: Make zip file
      run: zip -r ./$GITHUB_SHA.zip .
      shell: bash

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Upload to S3
      run: |
        aws s3 cp \
        --region ap-northeast-2 \
        ./$GITHUB_SHA.zip s3://$S3_BUCKET_NAME/$PROJECT_NAME/$GITHUB_SHA.zip

    - name: Code Deploy
      run: |
        aws deploy create-deployment \
        --application-name DND-dirary-CodeDeploy \
        --deployment-config-name CodeDeployDefault.AllAtOnce \
        --deployment-group-name deploy \
        --file-exists-behavior OVERWRITE \
        --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME/$GITHUB_SHA.zip
